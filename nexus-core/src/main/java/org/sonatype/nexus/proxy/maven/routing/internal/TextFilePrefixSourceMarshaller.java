/*
 * Sonatype Nexus (TM) Open Source Version
 * Copyright (c) 2007-2013 Sonatype, Inc.
 * All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
 *
 * This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
 * which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
 *
 * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
 * of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
 * Eclipse Foundation. All other trademarks are the property of their respective owners.
 */
package org.sonatype.nexus.proxy.maven.routing.internal;

import static com.google.common.base.Preconditions.checkArgument;
import static org.sonatype.nexus.util.PathUtils.elementsOf;
import static org.sonatype.nexus.util.PathUtils.pathFrom;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.sonatype.nexus.proxy.item.StorageFileItem;
import org.sonatype.nexus.proxy.maven.routing.Config;

import com.google.common.base.CharMatcher;
import com.google.common.io.Closeables;

/**
 * Marshals entries into raw streams and other way around. This is a simple text based file with prefixes with dead
 * simple syntax: Lines starting with '#' are comments, and any other non empty line is actually a prefix.
 * 
 * @author cstamas
 * @since 2.4
 */
public class TextFilePrefixSourceMarshaller
{
    protected static final String[] HEADERS = { "# Prefix file generated by Sonatype Nexus",
        "# Do not edit, changes will be overwritten!" };

    protected static final Charset CHARSET = Charset.forName( "UTF-8" );

    /**
     * Directive that indicates that automatic routing is not supported for the repository. Must be the first line of
     * the prefix file.
     */
    protected static final String UNSUPPORTED = "@ unsupported";

    private final int prefixFileMaxSize;

    private final int prefixFileMaxLineLength;

    private final int prefixFileMaxEntryCount;

    public interface Result
    {
        boolean supported();

        List<String> entries();
    }

    private static final Result RESULT_UNSUPPORTED = new Result()
    {
        @Override
        public boolean supported()
        {
            return false;
        }

        @Override
        public List<String> entries()
        {
            return Collections.emptyList();
        }
    };

    /**
     * Constructor.
     * 
     * @param config the autorouting config.
     */
    public TextFilePrefixSourceMarshaller( final Config config )
    {
        checkArgument( config.getPrefixFileMaxSize() > 0 );
        checkArgument( config.getPrefixFileMaxLineLength() > 0 );
        checkArgument( config.getPrefixFileMaxEntriesCount() > 0 );
        this.prefixFileMaxSize = config.getPrefixFileMaxSize();
        this.prefixFileMaxLineLength = config.getPrefixFileMaxLineLength();
        this.prefixFileMaxEntryCount = config.getPrefixFileMaxEntriesCount();
    }

    /**
     * Marshalls the prefix source into the output stream.
     * 
     * @param entries
     * @param outputStream
     * @throws IOException
     */
    public void write( final List<String> entries, final OutputStream outputStream )
        throws IOException
    {
        final PrintWriter printWriter = new PrintWriter( new OutputStreamWriter( outputStream, CHARSET ) );
        for ( String header : HEADERS )
        {
            printWriter.println( header );
        }
        for ( String entry : entries )
        {
            printWriter.println( entry );
        }
        printWriter.flush();
    }

    /**
     * Unmarshalls the prefix source from input stream.
     * 
     * @param file
     * @return prefix source
     * @throws InvalidInputException
     * @throws IOException
     */
    public final Result read( final StorageFileItem file )
        throws InvalidInputException, IOException
    {
        if ( file.getLength() > prefixFileMaxSize )
        {
            throw new InvalidInputException( "Prefix file size exceeds maximum allowed size (" + prefixFileMaxSize
                + "), refusing to load it." );
        }
        BufferedReader reader = null;
        try
        {
            final ArrayList<String> entries = new ArrayList<String>();
            reader = new BufferedReader( new InputStreamReader( file.getInputStream(), CHARSET ) );
            String line = reader.readLine();

            if ( UNSUPPORTED.equals( line ) )
            {
                return RESULT_UNSUPPORTED;
            }

            while ( line != null )
            {
                // trim
                line = line.trim();
                if ( !line.startsWith( "#" ) && line.length() > 0 )
                {
                    // line length
                    if ( line.length() > prefixFileMaxLineLength )
                    {
                        throw new InvalidInputException( "Prefix file contains line longer than allowed ("
                            + prefixFileMaxLineLength + " characters), refusing to load the file." );
                    }
                    // line should be ASCII
                    if ( !CharMatcher.ASCII.matchesAllOf( line ) )
                    {
                        throw new InvalidInputException(
                                                         "Prefix file contains non-ASCII characters, refusing to load the file." );
                    }
                    // Igor's find command makes path like "./org/apache/"
                    while ( line.startsWith( "." ) )
                    {
                        line = line.substring( 1 );
                    }
                    // win file separators? Highly unlikely but still...
                    line = line.replace( '\\', '/' );
                    // normalization
                    entries.add( pathFrom( elementsOf( line ) ) );
                }
                line = reader.readLine();

                // dump big files
                if ( entries.size() > prefixFileMaxEntryCount )
                {
                    throw new InvalidInputException( "Prefix file entry count exceeds maximum allowed count ("
                        + prefixFileMaxEntryCount + "), refusing to load it." );
                }
            }
            return new Result()
            {
                @Override
                public boolean supported()
                {
                    return true;
                }

                @Override
                public List<String> entries()
                {
                    return entries;
                }
            };
        }
        finally
        {
            Closeables.closeQuietly( reader );
        }
    }

    public void writeUnsupported( ByteArrayOutputStream outputStream )
    {
        final PrintWriter printWriter = new PrintWriter( new OutputStreamWriter( outputStream, CHARSET ) );
        printWriter.println( UNSUPPORTED );
        for ( String header : HEADERS )
        {
            printWriter.println( header );
        }
        printWriter.flush();
    }
}
