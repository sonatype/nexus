<?xml version="1.0" encoding="UTF-8"?>
<!--

    Sonatype Nexus (TM) Open Source Version
    Copyright (c) 2007-2012 Sonatype, Inc.
    All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.

    This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
    which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.

    Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
    of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
    Eclipse Foundation. All other trademarks are the property of their respective owners.

-->
<web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

  <display-name>Nexus Application</display-name>

  <!-- Booter -->
  <!--
    TODO: we have a chicken and egg problem: this produces WARNINGs in
    log, since logger is not yet set up, but logger needs properties set
    that are coming from Plexus boot sequence!
  -->
  <listener>
    <listener-class>org.sonatype.nexus.web.PlexusContainerContextListener</listener-class>
  </listener>
  <listener>
    <listener-class>org.sonatype.nexus.web.NexusGuiceContextListener</listener-class>
  </listener>
  <listener>
    <listener-class>org.sonatype.nexus.web.LogConfigListener</listener-class>
  </listener>
  <listener>
    <listener-class>org.sonatype.nexus.web.NexusBooterListener</listener-class>
  </listener>
  
  <!-- Security filter -->
  <filter>
    <filter-name>nexusFilter</filter-name>
    <filter-class>org.sonatype.nexus.security.filter.NexusJSecurityFilter</filter-class>
    <init-param>
      <param-name>config</param-name>
      <param-value>
      [filters]
        authcBasic = org.sonatype.nexus.security.filter.authc.NexusSecureHttpAuthenticationFilter
        authcBasic.applicationName = Sonatype Nexus Repository Manager API
        authcBasic.fakeAuthScheme = false
      
        authcNxBasic = org.sonatype.nexus.security.filter.authc.NexusSecureHttpAuthenticationFilter
        authcNxBasic.applicationName = Sonatype Nexus Repository Manager API (specialized auth)
        authcNxBasic.fakeAuthScheme = true

        logout = org.sonatype.security.web.filter.authc.LogoutAuthenticationFilter

        perms = org.sonatype.nexus.security.filter.authz.FailureLoggingHttpMethodPermissionFilter

        trperms = org.sonatype.nexus.security.filter.authz.NexusTargetMappingAuthorizationFilter
        trperms.pathPrefix = /service/local/repositories/(.*)/content(.*)
        trperms.pathReplacement = /repositories/@1@2

        tiperms = org.sonatype.nexus.security.filter.authz.NexusTargetMappingAuthorizationFilter
        tiperms.pathPrefix = /service/local/repositories/(.*)/index_content(.*)
        tiperms.pathReplacement = /repositories/@1@2

        tgperms = org.sonatype.nexus.security.filter.authz.NexusTargetMappingAuthorizationFilter
        tgperms.pathPrefix = /service/local/repo_groups/(.*)/content(.*)
        tgperms.pathReplacement = /groups/@1@2

        tgiperms = org.sonatype.nexus.security.filter.authz.NexusTargetMappingAuthorizationFilter
        tgiperms.pathPrefix = /service/local/repo_groups/(.*)/index_content(.*)
        tgiperms.pathReplacement = /groups/@1@2

        contentAuthcBasic = org.sonatype.nexus.security.filter.authc.NexusSecureHttpAuthenticationFilter
        contentAuthcBasic.applicationName = Sonatype Nexus Repository Manager
        contentAuthcBasic.fakeAuthScheme = false

        contentTperms = org.sonatype.nexus.security.filter.authz.NexusTargetMappingAuthorizationFilter
        contentTperms.pathPrefix = /content(.*)
        contentTperms.pathReplacement = @1

        authcApiKey = org.sonatype.nexus.security.filter.authc.NexusApiKeyAuthenticationFilter
        authcApiKey.applicationName = Sonatype Nexus Repository Manager API (X-...-ApiKey auth)
        authcApiKey.fakeAuthScheme = false
      </param-value>
    </init-param>
  </filter>
  
  <filter>
    <filter-name>guiceFilter</filter-name>
    <filter-class>org.sonatype.nexus.web.NexusGuiceFilter</filter-class>
  </filter>  
  
  <filter-mapping>
    <filter-name>nexusFilter</filter-name>
    <url-pattern>/service/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>nexusFilter</filter-name>
    <url-pattern>/content/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>guiceFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>  

  <!-- Welcome File -->
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
  </welcome-file-list>

  <!--
    Uncomment this if you need to edit JavaScript files and other
    resources while Jetty is running (to prevent it from locking
    everything). 
    <servlet>
      <servlet-name>default</servlet-name>
      <servlet-class>org.eclipse.jetty.servlet.DefaultServlet</servlet-class>
      <init-param>
        <param-name>useFileMappedBuffer</param-name>
        <param-value>false</param-value>
      </init-param>
    </servlet>
  -->
</web-app>
